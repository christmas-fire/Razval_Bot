from os import getenv
from dotenv import load_dotenv

from aiogram import Bot, Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.enums import ParseMode

from admin.keyboard import keyboard_admin
from admin.inline_keyboard import inline_admin_sending_mail
from sql_handler import get_users
from middleware import banned_users

load_dotenv()

TOKEN = getenv("TOKEN")

bot = Bot(TOKEN)
router_admin = Router()
pm = ParseMode.HTML


class Mail(StatesGroup):
    """
    –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    typing_mail = State()
    sending_mail = State()


@router_admin.message(Command(commands=["admin"]))
async def admin_console(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
    """
    await message.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∞!",
                         reply_markup=keyboard_admin())


#region [üí¨ –†–∞—Å—Å—ã–ª–∫–∞]
@router_admin.message(StateFilter(None), lambda message: message.text == "üí¨ –†–∞—Å—Å—ã–ª–∫–∞")
async def admin_start_mail(message: Message, state: FSMContext) -> None:
    await message.answer(f"–í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é <b>–†–∞—Å—Å—ã–ª–∫–∞</b>.\n"
                         f"–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n\n"
                         f"1. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                         f"2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ",
                         parse_mode=pm)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    await state.set_state(Mail.typing_mail)


@router_admin.message(Mail.typing_mail)
async def admin_typing_mail(message: Message, state: FSMContext) -> None:
    to_mail = message.text
    await state.update_data(to_mail=to_mail)
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ",
                         reply_markup=inline_admin_sending_mail())
    await state.set_state(Mail.sending_mail)


@router_admin.callback_query(Mail.sending_mail, F.data == "admin_sending_mail")
async def admin_sending_mail(callback: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    text = data.get("to_mail")
    users = await get_users()
    for user in users:
        user_id = user[0]
        try:
            await bot.send_message(chat_id=user_id,
                                   text=text,
                                   parse_mode=pm)
            await state.clear()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")


#endregion [üí¨ –†–∞—Å—Å—ã–ª–∫–∞]


#region [üêî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏]
@router_admin.message(lambda message: message.text == "üêî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def admin_banlist(message: Message) -> None:
    text = f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    count = 1
    for i in banned_users.keys():
        username = banned_users.get(i)
        text += f"{count}. @{username}\n"
        count += 1
    await message.answer(text,
                         parse_mode=pm)
#endregion [üêî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏]
