import os
import dotenv

from aiogram import Bot, Router, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.enums import ParseMode

from admin.keyboard import keyboard_admin
from admin.inline_keyboard import inline_admin_sending_mail
from sql_handler import get_users_id, get_users_username, get_orders_username
from middleware import banned_users

dotenv.load_dotenv()
TOKEN = os.getenv("TOKEN")
ADMIN = int(os.getenv("ADMIN"))
RAZVAL = int(os.getenv("RAZVAL"))

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
router_admin = Router()


class Mail(StatesGroup):
    """
    –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    typing_mail = State()
    sending_mail = State()


@router_admin.message(Command(commands=["admin"]))
async def admin_console(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
    """
    await message.delete()
    if message.from_user.id == ADMIN or message.from_user.id == RAZVAL:
        await message.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∞!",
                             reply_markup=keyboard_admin())
    else:
        await message.answer("–í–∞–º —Å—é–¥–∞ –Ω–µ–ª—å–∑—è..")


# region [üí¨ –†–∞—Å—Å—ã–ª–∫–∞]
@router_admin.message(StateFilter(None), lambda message: message.text == "üí¨ –†–∞—Å—Å—ã–ª–∫–∞")
async def admin_start_mail(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ [üí¨ –†–∞—Å—Å—ã–ª–∫–∞], –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ "–ø–∏—à–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ..."
    """
    await message.delete()
    await message.answer(f"–í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é <b>[üí¨ –†–∞—Å—Å—ã–ª–∫–∞]</b>.\n"
                         f"–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n\n"
                         f"1. ‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                         f"2. ü§ñ –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞\n"
                         f"3. üì© –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    await state.set_state(Mail.typing_mail)


@router_admin.message(Mail.typing_mail)
async def admin_typing_mail(message: Message, state: FSMContext) -> None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ "–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ..."
    """
    to_mail = message.text
    await state.update_data(to_mail=to_mail)
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ!",
                         reply_markup=inline_admin_sending_mail())
    await state.set_state(Mail.sending_mail)


@router_admin.callback_query(Mail.sending_mail, F.data == "admin_sending_mail")
async def admin_sending_mail(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –ë–î
    """
    data = await state.get_data()
    text = data.get("to_mail")
    users = await get_users_id()
    for user in users:
        user_id = user[0]
        try:
            await bot.send_message(chat_id=user_id,
                                   text=text)
            await state.clear()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")


# endregion [üí¨ –†–∞—Å—Å—ã–ª–∫–∞]


# region [üêî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏]
@router_admin.message(lambda message: message.text == "üêî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def admin_banlist(message: Message) -> None:
    """
    –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    await message.delete()
    text = f"üêî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    count = 1
    for i in banned_users.keys():
        username = banned_users.get(i)
        text += f"{count}. @{username}\n"
        count += 1
    await message.answer(text)
# endregion [üêî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏]


# region [üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π]
@router_admin.message(lambda message: message.text == "üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def list_of_users(message: Message) -> None:
    """
    –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    await message.delete()
    text = f"üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    count = 1
    users = await get_users_username()
    for user in users:
        user_username = user[0]
        text += f"{count}. @{user_username}\n"
        count += 1
    await message.answer(text)
# endregion [üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π]


# region [üìö –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤]
@router_admin.message(lambda message: message.text == "üìö –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤")
async def list_of_orders(message: Message) -> None:
    """
    –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–¥–µ–ª–∞–ª–∏ –∑–∞–∫–∞–∑
    """
    await message.delete()
    text = f"üìö –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–¥–µ–ª–∞–ª–∏ –∑–∞–∫–∞–∑:\n\n"
    count = 1
    orders = await get_orders_username()
    for order in orders:
        order_username = order[0]
        text += f"{count}. @{order_username}\n"
        count += 1
    await message.answer(text)
# endregion [üìö –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤]